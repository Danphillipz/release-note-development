trigger:
  batch: true
  branches:
    include:
      - main

variables:
  - name: version_major
    value: "1"
  - name: version_minor
    value: "0"
  - name: isMergeBuild
    value: ${{ and(eq(variables['Build.SourceBranch'], 'refs/heads/main'), or(eq(variables['Build.Reason'], 'BatchedCI'),eq(variables['Build.Reason'], 'IndividualCI'))) }}
  - name: isPullRequest
    value: ${{ eq(variables['Build.Reason'], 'PullRequest') }}
parameters:
  - name: include
    type: string
    default: " "
    displayName: Test tags to include
  - name: exclude
    type: string
    default: "blocked"
    displayName: Test tags to exclude
  - name: environment
    type: string
    values:
      - local
    default: local
    displayName: Environment to execute against
  - name: customOptions
    type: string
    default: " "
  - name: reason
    type: string
    values:
      - deployment
      - scheduled
      - manual
    default: manual

resources:
  repositories:
    - repository: wiki
      type: git
      name: QA.wiki
      ref: wikiMaster

stages:
  - stage: StaticAnalysis
    displayName: Static Analysis
    dependsOn: [ ]
    condition: and(succeededOrFailed(), ne(variables['Build.Reason'], 'Manual'))
    jobs:
      - job: Scan
        displayName: Scan Project
        workspace:
          clean: outputs | resources
        steps:
          - task: Maven@4
            displayName: "Scan Project"
            inputs:
              mavenPomFile: "pom.xml"
              goals: "clean compile"
              javaHomeOption: "JDKVersion"
              jdkVersionOption: "1.21"
              mavenVersionOption: "Default"
              mavenOptions: "-Xmx3072m"
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
              checkStyleRunAnalysis: false
              spotBugsRunAnalysis: false
              spotBugsGoal: "check"

      - job: UnitTest
        displayName: Unit Tests
        steps:
          - task: Maven@4
            displayName: "Run tests"
            inputs:
              mavenPomFile: "pom.xml"
              goals: "clean test"
              options: "--no-transfer-progress --batch-mode"
              publishJUnitResults: false
              testResultsFiles: "**/unittest-junitreport.xml"
              testRunTitle: "Unit Test Run"
              javaHomeOption: "JDKVersion"
              jdkVersionOption: "1.21"
              mavenVersionOption: "Default"
              mavenOptions: "-Xmx3072m"
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
              checkStyleRunAnalysis: false
              spotBugsRunAnalysis: false
              spotBugsGoal: "check"

          - task: PublishTestResults@2
            condition: succeededOrFailed()
            displayName: Publish Unit Test Results
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "**/target/surefire-reports/TEST-*.xml"
              mergeTestResults: true
              testRunTitle: Unit Tests

      - job: MissingStepDefinitions
        displayName: Missing Step Definitions
        steps:
          - task: Maven@4
            displayName: "Dry Run"
            inputs:
              mavenPomFile: "pom.xml"
              goals: "clean verify"
              options: "-Dcucumber.execution.dry-run=true -Dcucumber.plugin=progress -Dskip.surefire.tests --no-transfer-progress --batch-mode"
              publishJUnitResults: false
              javaHomeOption: "JDKVersion"
              jdkVersionOption: "1.21"
              mavenVersionOption: "Default"
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
              checkStyleRunAnalysis: false
              spotBugsRunAnalysis: false

  - stage: "Test"
    displayName: "Run playwright tests"
    dependsOn: [ ]
    jobs:
      - job: "Test"
        strategy:
          matrix:
            chrome:
              browserName: "chrome"
        workspace:
          clean: outputs | resources
        timeoutInMinutes: 180
        steps:
          - script: |
              if [ "$(isPullRequest)" == "True" ] && [ "${{ parameters.include }}" == " " ]; then
                testTagValue="Smoke"
              else
                testTagValue="${{ parameters.include }}"
              fi
              echo "##vso[task.setvariable variable=testTag]$testTagValue"

              echo "Using test tags:"
              echo "Include: $testTagValue"
              echo "Exclude: ${{ parameters.exclude }}"
            displayName: "Set tests to run"
          - script: |
              if [ "$(browserName)" == "edge" ]; then
                mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install --with-deps chromium --force"
              else
                mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install --with-deps $(browserName) --force"
              fi
            displayName: "Install playwright"

          - task: Maven@4
            condition: succeeded()
            displayName: "Cucumber Test Run"
            continueOnError: true
            inputs:
              mavenPomFile: "pom.xml"
              goals: "clean verify"
              options: "-Dskip.surefire.tests -Dbrowser=$(browserName)
                -Dheadless=true -Denvironment=${{ parameters.environment }}
                -Dgroups=${{ parameters.include }} -DexcludedGroups=${{ parameters.exclude }} ${{ parameters.customOptions }}"
              publishJUnitResults: true
              testResultsFiles: "**/junitreport.xml"
              testRunTitle: "Cucumber Test Run"
              javaHomeOption: "JDKVersion"
              jdkVersionOption: "1.21"
              mavenVersionOption: "Default"
              mavenOptions: "-Xmx3072m"
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
              checkStyleRunAnalysis: false
              spotBugsRunAnalysis: false
              spotBugsGoal: "check"

          - bash: |
              if [ -z "$( ls -A './target/cucumber-report' )" ]; then
                echo "##[error]No tests were executed, setting pipeline to failed."
                exit 1
              fi
            displayName: Checks for No Tests Found
            condition: always()

          - template: publish-cucumber-reports.yml
            parameters:
              publishCondition: always()
              name: Cucumber Test Run
              browserName: $(browserName)

          - task: Bash@3
            condition: succeededOrFailed()
            displayName: "Check for failed scenarios"
            inputs:
              targetType: "inline"
              script: |
                if [ -s target/failedScenarios.txt ]; then
                  echo "##vso[task.setvariable variable=testTag]$(cat target/failedScenarios.txt)"
                  echo "Failed Test Cases: $(testTag)"
                else
                  echo "##vso[task.setvariable variable=testTag]NO_TESTS"
                fi

          - task: Maven@4
            condition: and(succeededOrFailed(), ne(variables['testTag'], 'NO_TESTS'))
            displayName: "Cucumber Test Retries"
            inputs:
              mavenPomFile: "pom.xml"
              goals: "test-compile exec:java"
              options: "-Dexec.mainClass=testrunner.CucumberTestRerunner -Dheadless=true"
              publishJUnitResults: true
              testResultsFiles: "**/junitreport.xml"
              testRunTitle: "Cucumber Test Retries"
              javaHomeOption: "JDKVersion"
              jdkVersionOption: "1.21"
              mavenVersionOption: "Default"
              mavenOptions: "-Xmx3072m"
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
              checkStyleRunAnalysis: false
              spotBugsRunAnalysis: false
              spotBugsGoal: "check"

          - template: publish-cucumber-reports.yml
            parameters:
              publishCondition: ne(variables['testTag'], 'NO_TESTS')
              name: "Cucumber Test Retries"
              browserName: $(browserName)

      - job: Tagging
        displayName: Add Tags
        steps:
          - checkout: none
          - bash: |
              echo "##vso[build.addbuildtag]$(Build.SourceBranch)"
              echo "##vso[build.addbuildtag]${{parameters.environment}}"
              if [ "$(isMergeBuild)" = True ]; then
                echo "##vso[build.addbuildtag]Merge"
              elif [ "$(isPullRequest)" = True ]; then
                echo "##vso[build.addbuildtag]PullRequest"
              else
                echo "##vso[build.addbuildtag]${{parameters.reason}}"
              fi
            displayName: Set Build Tags

  - stage: BuildNumber
    condition: and(succeededOrFailed(), eq(variables.isMergeBuild, 'true'))
    dependsOn:
      - Test
      - StaticAnalysis
    jobs:
      - job: SetBuildNumber
        displayName: Set Build Number
        variables:
          version_revision: $[counter(format('{0}-{1}',variables['version_major'], variables['version_minor']), 0)]
          version: $(version_major).$(version_minor).$(version_revision)
        steps:
          - checkout: none
          - task: CmdLine@2
            displayName: Update Build Number
            inputs:
              script: |
                echo '##vso[build.updatebuildnumber]$(version)';

  - stage: ReleaseNotes
    condition: and(succeededOrFailed(), eq(variables.isMergeBuild, 'true'))
    dependsOn:
      - BuildNumber
    jobs:
      - job: GenerateAndPublish
        condition: succeededOrFailed()
        uses:
          repositories: [ wiki ]
        steps:
          - task: XplatGenerateReleaseNotes@4
            displayName: Generate Release Notes
            inputs:
              outputfile: "$(Build.ArtifactStagingDirectory)/releasenotes.md"
              templateLocation: "File"
              templatefile: "$(System.DefaultWorkingDirectory)/build/handlebar/releaseNoteTemplate.handlebars"
              customHandlebarsExtensionFile: "custom-extensions.js"
              customHandlebarsExtensionFolder: "$(System.DefaultWorkingDirectory)/build/handlebar/extensions"
              checkStage: true
              replaceFile: false
              getParentsAndChildren: false
              getAllParents: false
              getIndirectPullRequests: false
              stopOnError: true
              considerPartiallySuccessfulReleases: true
              checkForManuallyLinkedWI: true # Picks up items manually linked rather than via commit message
              wiqlFromTarget: "WorkItems"
              dumpPayloadToFile: true
              dumpPayloadFileName: $(Build.ArtifactStagingDirectory)/release-notes-payload.json

          - task: PublishBuildArtifacts@1
            displayName: "Publish Release Notes Payload"
            inputs:
              pathtoPublish: "$(Build.ArtifactStagingDirectory)/release-notes-payload.json"
              artifactName: "release-notes-payload.json"

          - task: WikiUpdaterTask@3
            displayName: Publish Release Notes to WIKI
            condition: succeededOrFailed()
            inputs:
              repo: "https://ensonodigitaluk@dev.azure.com/ensonodigitaluk/QA/_git/QA.wiki"
              branch: "wikiMaster"
              filename: "Automation-Test-Suites/Release-Notes/$(version_major).$(version_minor).md"
              replaceFile: false # appends to the end of the existing WIKI
              dataIsFile: true
              sourceFile: "$(Build.ArtifactStagingDirectory)/releasenotes.md" # file output from previous task
              message: "Automatic commit from pipeline"
              gitname: "pipeline"
              gitemail: "pipeline@ensono.com"
              useAgentToken: true
              localpath: '$(System.DefaultWorkingDirectory)\repo'
              updateOrderFile: true
              prependEntryToOrderFile: true
              injecttoc: true
